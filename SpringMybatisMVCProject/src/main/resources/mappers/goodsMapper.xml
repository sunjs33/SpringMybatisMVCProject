<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="goodsMapper">
  <sql id="basecolumn">
  	GOODS_NUM,USER_ID,GOODS_NAME,GOODS_CONTENT,
  	GOODS_IMAGE,READ_COUNT,IP_ADDR,GOODS_PRICE,GOODS_REGISTER
  
  </sql>
  <sql id="cartcolumn">
  	CART_NUM, goods_num, user_id, goods_name, goods_price, goods_image, qty, total_price
  </sql>
  <insert id="goodsInsert" parameterType="model.GoodsDTO">
  	insert into goods(<include refid="basecolumn"/>)
  	values(#{goodsNum},#{userId},#{goodsName},#{goodsContent},
  	#{goodsImage},0,#{ipAddr},#{goodsPrice},sysdate)
  
  </insert>
  
  <insert id="goodsCartAdd" parameterType="model.CartDTO" useGeneratedKeys="false">
 	MERGE into cart c
  	USING (select goods_num from goods where goods_num= #{goodsNum}) g
  	on (c.goods_num = g.goods_num and c.user_id=#{userId})
  	when MATCHED then update set qty =qty+1,total_price=goods_price*(qty+1) 
  	when NOT MATCHED then
  		insert (c.cart_num, c.goods_num, c.user_id, c.goods_name, 
  				c.goods_price, c.goods_image, c.qty, c.total_price)
  		values (num_seq.nextval, g.goods_num,#{userId}, #{goodsName},
  				#{goodsPrice}, #{goodsImage},1,#{goodsPrice})
  				
  		
  </insert>
  <select id="getGoodsList" resultType="model.GoodsDTO">
  	select *
  	from (select rownum rn, <include refid="basecolumn"/>
		  from (select <include refid="basecolumn"/>
		  	from goods
		  	<where>
		  		<if test="goodsNum != null">
		  			goods_num=#{goodsNum}
		  		</if>
		  	</where>
		  	order by goods_register desc))
  	<where>
  		<if test="startEndPageDTO != null">
 			rn between #{startEndPageDTO.startPage} 
		   	   and #{startEndPageDTO.endPage}
 		</if>
  	</where>
  </select>
  <select id="getGoodsCount" resultType="int">
	select count(*)	from goods
  </select>
  
  <select id="cartList" parameterType="String" resultType="model.CartDTO">
  	select  <include refid="cartcolumn"/>
  	from cart
  	<where>
  		<if test="value != null">
  			user_id=#{userId}
  		</if>
  		<if test="value == null">
  			user_id=null
  		</if>
  	</where>
  
  </select>
  <delete id="goodsCartRemove" parameterType="hashMap">
  	delete from cart
  	<where>
  		<if test="cartNums != null">
  			cart_num IN
  			<foreach collection="cartNums" item="cartNum" index="index" open="(" close=")" separator=",">
  				#{cartNum}
  			</foreach>
  		
  		</if>
  	
  	</where>
  	
  </delete>
  <update id="goodsCartQtyDown" parameterType="long">
  	update cart
  	set qty=qty-1, total_price=(qty-1)*goods_price
  	where cart_num=#{cartNum}
  
  </update>
  
  <insert id="wishAdd" parameterType="model.WishDTO" useGeneratedKeys="false">
  	merge into wish w
  	using(select goods_num from goods where goods_num=#{goodsNum}) g
  	on (w.goods_num=g.goods_num and w.user_id=#{userId})
  	when matched then
  		update set w.ck= 1
  		delete where (w.goods_num = #{goodsNum} and w.user_id=#{userId})
  	when not matched then
  		insert (w.goods_num, w.user_id)
  		values (#{goodsNum}, #{userId})
  
  </insert>
  
  <select id="wishCount" parameterType="model.WishDTO" resultType="int">
  	select count(*) from wish
  	where goods_num=#{goodsNum} and user_id=#{userId}
  </select>
  
  <select id="goodsWishList" parameterType="String" resultType="model.GoodsDTO">
  	select <include refid="basecolumn"/>
  	from goods
  	where goods_num in (select goods_num from wish where user_id=#{userId})
  </select>
  
  <delete id="goodsDelete" parameterType="model.GoodsDTO">
  	delete from goods
  	where user_id=#{userId} and goods_num=#{goodsNum}
  	
  </delete>
  
  
  </mapper>
  